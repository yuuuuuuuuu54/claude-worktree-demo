services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: digeon_postgres
    environment:
      POSTGRES_DB: digeon_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - digeon-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d digeon_db"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: digeon_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - digeon-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: digeon_api
    environment:
      - SERVER_PORT=8080
      - SERVER_HOST=0.0.0.0
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=digeon_db
      - DB_SSL_MODE=disable
      - JWT_SECRET=your-super-secret-jwt-key-for-docker
      - JWT_EXPIRE_HOURS=24
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - UPLOAD_DIR=/app/uploads
      - MAX_FILE_SIZE=5242880
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
    networks:
      - digeon-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: digeon_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./uploads:/usr/share/nginx/html/uploads
    depends_on:
      - api
    networks:
      - digeon-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  digeon-network:
    driver: bridge